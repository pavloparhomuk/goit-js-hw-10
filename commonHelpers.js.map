{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('[data-start]');\nconst dateTimePicker = document.querySelector('#datetime-picker');\nconst timerElements = {\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n};\n\nstartBtn.disabled = true;\n\nlet countdownInterval;\nlet selectedDate;\n\nconst convertMs = ms => {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor((ms % hour) / minute);\n  const seconds = Math.floor((ms % minute) / second);\n\n  return { days, hours, minutes, seconds };\n};\n\nconst addLeadingZero = value => value.toString().padStart(2, '0');\n\nconst updateTimer = ({ days, hours, minutes, seconds }) => {\n  timerElements.days.textContent = addLeadingZero(days);\n  timerElements.hours.textContent = addLeadingZero(hours);\n  timerElements.minutes.textContent = addLeadingZero(minutes);\n  timerElements.seconds.textContent = addLeadingZero(seconds);\n};\n\nconst startCountdown = () => {\n  countdownInterval = setInterval(() => {\n    const now = new Date().getTime();\n    const timeLeft = selectedDate - now;\n\n    if (timeLeft <= 0) {\n      clearInterval(countdownInterval);\n      updateTimer({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      return;\n    }\n\n    const timeComponents = convertMs(timeLeft);\n    updateTimer(timeComponents);\n  }, 1000);\n};\n\nflatpickr(dateTimePicker, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose: selectedDates => {\n    selectedDate = selectedDates[0];\n\n    if (selectedDate <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startBtn.disabled = true;\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n});\n\nstartBtn.addEventListener('click', () => {\n  startBtn.disabled = true;\n  startCountdown();\n});\n"],"names":["startBtn","dateTimePicker","timerElements","countdownInterval","selectedDate","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","updateTimer","startCountdown","now","timeLeft","timeComponents","flatpickr","selectedDates","iziToast"],"mappings":"2GAMA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAgB,CACpB,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EAEAF,EAAS,SAAW,GAEpB,IAAIG,EACAC,EAEJ,MAAMC,EAAYC,GAAM,CAMtB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAOH,EAAK,KAAQ,GAAM,EACzCI,EAAU,KAAK,MAAOJ,EAAK,IAAU,GAAM,EAEjD,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,EAEMC,EAAiBC,GAASA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,EAE1DC,EAAc,CAAC,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,IAAO,CACzDR,EAAc,KAAK,YAAcS,EAAeJ,CAAI,EACpDL,EAAc,MAAM,YAAcS,EAAeH,CAAK,EACtDN,EAAc,QAAQ,YAAcS,EAAeF,CAAO,EAC1DP,EAAc,QAAQ,YAAcS,EAAeD,CAAO,CAC5D,EAEMI,EAAiB,IAAM,CAC3BX,EAAoB,YAAY,IAAM,CACpC,MAAMY,EAAM,IAAI,KAAM,EAAC,QAAO,EACxBC,EAAWZ,EAAeW,EAEhC,GAAIC,GAAY,EAAG,CACjB,cAAcb,CAAiB,EAC/BU,EAAY,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EACzD,MACD,CAED,MAAMI,EAAiBZ,EAAUW,CAAQ,EACzCH,EAAYI,CAAc,CAC3B,EAAE,GAAI,CACT,EAEAC,EAAUjB,EAAgB,CACxB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAASkB,GAAiB,CACxBf,EAAee,EAAc,CAAC,EAE1Bf,GAAgB,IAAI,MACtBgB,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDpB,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAEvB,CACH,CAAC,EAEDA,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpBc,GACF,CAAC"}